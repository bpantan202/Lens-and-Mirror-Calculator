mean_vala = ['‡∏£‡∏∞‡∏¢‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏', '‡∏£‡∏∞‡∏¢‡∏∞‡∏†‡∏≤‡∏û', '‡∏£‡∏∞‡∏¢‡∏∞‡πÇ‡∏ü‡∏Å‡∏±‡∏™', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏¢‡∏≤‡∏¢'] #‡πÑ‡∏ß‡πâdisplay‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤
variable = ['S', "S'", 'f', 'm'] #‡πÑ‡∏ß‡πâdisplay‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
variable2 = ['s', 'sdat', 'f', 'm'] #‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏∏‡∏ï‡∏£‡πÉ‡∏ôdefind‡∏ï‡πà‡∏≤‡∏á‡πÜ

position = {'s': 0, 'sdat': 1, 'f': 2, 'm': 3} #dic‡πÑ‡∏ß‡πâ‡∏ö‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤user_input‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ
meaning = {'+f': '‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡πÄ‡∏ß‡πâ‡∏≤/‡πÄ‡∏•‡∏ô‡∏™‡πå‡∏ô‡∏π‡∏ô', '-f': '‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡∏ô‡∏π‡∏ô/‡πÄ‡∏•‡∏ô‡∏™‡πå‡πÄ‡∏ß‡πâ‡∏≤',
           "+S": '‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏à‡∏Å/‡πÄ‡∏•‡∏ô‡∏™‡πå', "-S": '‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏∞‡∏à‡∏Å/‡πÄ‡∏•‡∏ô‡∏™‡πå',
           "+S'": '‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á', "-S'": '‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô',
           '+m': '‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á', '-m': '‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô', '0f': '‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ', '0S': '‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ', "0S'": '‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ',
           '0m': '‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ'}  # dic‡πÑ‡∏ß‡πâ‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á+,-‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
three_choose_two = [[0, 1], [0, 2], [1, 2]]  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏™‡∏£‡∏π‡πâ‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß(3‡πÄ‡∏•‡∏∑‡∏≠‡∏Å2)


def pos_or_neg(number):  # ‡πÄ‡∏ã‡πá‡∏Ñ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤+/-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ôstr‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏™‡πÉ‡∏õ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ôdic‡∏ï‡πà‡∏≠
    if number > 0:
        return '+'
    elif number < 0:
        return '-'
    else:
        return 0


def check_float(data):  # defind‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ôfloat‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try:
        float(data)
        return True
    except ValueError:
        return False


def check_int(data):  # defind‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ôint‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try:
        int(data)
        return True
    except ValueError:
        return False


def s__sdat_f(sdat, f):  # ‡∏´‡∏≤ s ‡∏à‡∏≤‡∏Å s',f
    s = (f * sdat) / (sdat - f)
    return s


def s__f_m(f, m):  # ‡∏´‡∏≤ s ‡∏à‡∏≤‡∏Å f,m
    s = (f / m) + f
    return s


def s__sdat_m(sdat, m):  # ‡∏´‡∏≤ s ‡∏à‡∏≤‡∏Å s',m
    s = sdat / m
    return s


def sdat__s_f(s, f):  # ‡∏´‡∏≤ s' ‡∏à‡∏≤‡∏Å s,f
    sdat = (f * s) / (s - f)
    return sdat


def sdat__f_m(f, m):  # ‡∏´‡∏≤ s' ‡∏à‡∏≤‡∏Å f,m
    sdat = f * m + f
    return sdat


def sdat__s_m(s, m):  # ‡∏´‡∏≤ s' ‡∏à‡∏≤‡∏Å s,m
    sdat = s * m
    return sdat


def f__s_sdat(s, sdat):  # ‡∏´‡∏≤ f ‡∏à‡∏≤‡∏Å s,s'
    f = (s * sdat) / (s + sdat)
    return f


def f__s_m(s, m):  # ‡∏´‡∏≤ f ‡∏à‡∏≤‡∏Å s,m
    f = (s * m) / (1 + m)
    return f


def f__sdat_m(sdat, m):  # ‡∏´‡∏≤ f ‡∏à‡∏≤‡∏Å s',m
    f = (sdat) / (m + 1)
    return f


def m__s_sdat(s, sdat):  # ‡∏´‡∏≤ m ‡∏à‡∏≤‡∏Å s',s
    m = sdat / s
    return m


def m__s_f(s, f):  # ‡∏´‡∏≤ m ‡∏à‡∏≤‡∏Å f,s
    m = f / (s - f)
    return m


def m__sdat_f(sdat, f):  # ‡∏´‡∏≤ m ‡∏à‡∏≤‡∏Å s',f
    m = (sdat - f) / f
    return m


def print_meaning(data): #‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
    print('‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ')
    print('‡∏£‡∏∞‡∏¢‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏(S)  = %.2f cm.' % data[0], meaning[pos_or_neg(data[0]) + "S"])
    print("‡∏£‡∏∞‡∏¢‡∏∞‡∏†‡∏≤‡∏û(S') = %.2f cm." % data[1], meaning[pos_or_neg(data[1]) + "S'"])
    print('‡∏£‡∏∞‡∏¢‡∏∞‡πÇ‡∏ü‡∏Å‡∏±‡∏™(f) = %.2f cm.' % data[2], meaning[pos_or_neg(data[2]) + "f"])
    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏¢‡∏≤‡∏¢(m) = %.2f cm." % data[3], meaning[pos_or_neg(data[3]) + "m"])




#Welcome display
print('         üÖÜüÖ¥üÑªüÖ≤üÑæüÖºüÑ¥ üÜÉüÑæ')
print('üÑª‚í∫üÑΩ‚ìà üÑ∞‚ìÉüÑ≥ ‚ìÇüÑ∏‚ìáüÖÅ‚ìÑüÖÅ ‚í∏üÑ∞‚ìÅüÑ≤‚ìäüÑª‚í∂üÖÉ‚ìÑüÖÅ')
print()
print('='*100)
print()
print('---üÖóüÖûüÖ¶ üÖ£üÖû üÖ§üÖ¢üÖî---')
print('1.‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏∏‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏£‡∏≤‡∏ö (‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà - )')
print('2.‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤+/-')
print('3.‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏´‡πâ')
print(' - ‡∏Å‡∏£‡∏ì‡∏µ‡πà‡∏ó‡∏£‡∏≤‡∏ö1‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• : ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠')
print(' - ‡∏Å‡∏£‡∏ì‡∏µ‡πà‡∏ó‡∏£‡∏≤‡∏ö2‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• : ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì')
print(' - ‡∏Å‡∏£‡∏ì‡∏µ‡πà‡∏ó‡∏£‡∏≤‡∏ö3‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• : ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•3‡∏ï‡∏±‡∏ß‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏´‡∏≤‡∏Å‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°')
print('                 ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ü‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á3‡∏ï‡∏±‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô')
print(' - ‡∏Å‡∏£‡∏ì‡∏µ‡πà‡∏ó‡∏£‡∏≤‡∏ö4‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• : ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á4‡∏ï‡∏±‡∏ß‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà')
print('4.‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
print('5.‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå N')
print('***‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ cm.***')
print()
print('='*100)
print()
print('---‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏ï‡πâ‡∏ô---')
print('‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏£‡∏≤‡∏ö')
print("1) 1/f = (1/S)+(1/S)'")
print("2) m = f/(S-f)")
print("3) m  (S'-f)/f ")
print("4) m = S'/S")
print()
print('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢+/-')
print("‡∏£‡∏∞‡∏¢‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏(S)  : [+]‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏à‡∏Å/‡πÄ‡∏•‡∏ô‡∏™‡πå  [-]‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏∞‡∏à‡∏Å/‡πÄ‡∏•‡∏ô‡∏™‡πå")
print("‡∏£‡∏∞‡∏¢‡∏∞‡∏†‡∏≤‡∏û(S') : [+]‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á            [-]‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô")
print("‡∏£‡∏∞‡∏¢‡∏∞‡πÇ‡∏ü‡∏Å‡∏±‡∏™(f) : [+]‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡πÄ‡∏ß‡πâ‡∏≤/‡πÄ‡∏•‡∏ô‡∏™‡πå‡∏ô‡∏π‡∏ô    [-]‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡∏ô‡∏π‡∏ô/‡πÄ‡∏•‡∏ô‡∏™‡πå‡πÄ‡∏ß‡πâ‡∏≤")
print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏¢‡∏≤‡∏¢(m) : [+]‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á            [-]‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô")
print()
print('='*100)
print()
# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
while True:
    user_input = []  # ‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏≠‡∏Å
    process1 = []  # ‡πÑ‡∏ß‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ú‡∏¥‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á4‡∏ï‡∏±‡∏ß

    know = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á
    dont_know = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö
    last_ans = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
    print('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢cm.)')
    print()
    for i in range(4):
        check_input = True
        while check_input:
            x = input(f'{mean_vala[i]}({variable[i]}) : ')
            if check_float(x) or x == '-':
                check_input = False
            else:
                print('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ -')
        if x != '-':
            know.append(variable2[i])
            print(f'1:{meaning["+" + variable[i]]}(+)  2:{meaning["-" + variable[i]]}(-)')
            process = True
            while process:
                num_choose = input('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç : ')
                if not check_int(num_choose):
                    print('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡∏Ç1‡∏´‡∏£‡∏∑‡∏≠2‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
                elif int(num_choose) == 1:
                    if float(x) < 0:
                        x = x[1:len(x)]
                    x = float(x)
                    process = False
                elif int(num_choose) == 2:
                    if float(x) > 0:
                        x = '-' + x
                    x = float(x)
                    process = False
                else:
                    print('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡∏Ç1‡∏´‡∏£‡∏∑‡∏≠2‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
        user_input.append(x)
        print()

    for j in variable2: #‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡πÉ‡∏™‡πàlist dont_know‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        if j not in know:
            dont_know.append(j)
    print('=' * 100)
    print()
    #print‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
    print('‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤')
    for z in range(4):
        if user_input[z]=='-':
            print(f'{mean_vala[z]}({variable[z]}) = ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ñ‡πà‡∏≤')
        else:
            print(f'{mean_vala[z]}({variable[z]}) = {user_input[z]} cm.')
    print()
    print('=' * 100)
    print()
    # ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ list user_input ‡πÅ‡∏•‡πâ‡∏ß [‡∏£‡∏∞‡∏¢‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏,‡∏£‡∏∞‡∏¢‡∏∞‡∏†‡∏≤‡∏û,‡∏£‡∏∞‡∏¢‡∏∞‡πÇ‡∏ü‡∏Å‡∏±‡∏™,‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏¢‡∏≤‡∏¢]

    if len(know) <= 1: #‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        print('‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏£‡∏≤‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!!!')
    elif len(know) == 2: #‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏ö
        #print('know 2 data')  # Will delete
        process1 = ['-', '-', '-', '-']
        for k in dont_know:
            merge = k + '__' + know[0] + '_' + know[1]
            ans = locals()[merge](user_input[position[know[0]]], user_input[position[know[1]]])
            process1[position[k]] = ans
        for m in range(4):
            if user_input[m] == '-':
                last_ans.append(process1[m])
            else:
                last_ans.append(user_input[m])
        print_meaning(last_ans)
    elif len(know) == 3: #‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏°‡∏≤3‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏≠‡∏µ‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å3‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å2‡∏à‡∏≤‡∏Å3‡∏°‡∏≤‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ3‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏à‡∏∞‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        #print('know 3 data')  # Will delete
        for k in range(3):
            merge = dont_know[0] + '__' + know[three_choose_two[k][0]] + '_' + know[three_choose_two[k][1]]
            ans = locals()[merge](user_input[position[know[three_choose_two[k][0]]]],
                                  user_input[position[know[three_choose_two[k][1]]]])
            process1.append(ans)
        if process1[0] == process1[1] == process1[2]:
            for m in range(4):
                if user_input[m] == '-':
                    last_ans.append(process1[0])
                else:
                    last_ans.append(user_input[m])
            print_meaning(last_ans)
        else:
            print('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
    elif len(know) == 4: #‡∏£‡∏π‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á4‡∏ï‡∏±‡∏ß‡∏ô‡∏≥‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏°‡∏≤‡πÄ‡∏ã‡πá‡∏Ñ‡∏Å‡∏±‡∏ö‡∏ß‡∏ô‡∏Å‡∏±‡∏ô1‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ã‡πá‡∏Ñ‡πÑ‡∏î‡πâ3‡∏™‡∏π‡∏ï‡∏£‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ô‡∏´‡∏≤‡∏Å‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤true‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Åtrue‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        # print('know 4 data')  # Will delete
        for k in know:
            to_check = []
            for l in know:
                if l != k:
                    to_check.append(l)
            create_list = []
            for m in range(3):
                merge = k + '__' + to_check[three_choose_two[m][0]] + '_' + to_check[three_choose_two[m][1]]
                ans = locals()[merge](user_input[position[to_check[three_choose_two[m][0]]]],
                                      user_input[position[to_check[three_choose_two[m][1]]]])
                create_list.append(ans)
            if create_list[0] == create_list[1] == create_list[2]:
                process1.append(True)
            else:
                process1.append(False)
        if False not in process1:
            print('‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏Ñ‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß')
            print()
            print_meaning(user_input)
        else:
            print('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
    print()
    print('='*100)
    print()
    #Ask to run again
    ask = input('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà(Y/N) : ').upper()
    print()
    print('=' * 100)
    print()
    if ask == 'N':
        print('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡πÄ‡∏•‡∏∞‡πÄ‡∏£‡∏≤‡∏´‡∏ß‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏¥‡πà‡∏á‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡πá‡∏ô‡πâ‡∏≠‡∏¢')
        break


